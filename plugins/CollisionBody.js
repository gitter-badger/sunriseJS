!function(a){var b=a.$rootScope,c=b.$scope.fn;rootfn=b.fn,c.CollisionBody=function(){return CollisionBody=function(a){c.Component.call(this),this.options=a},c.Component.extend(CollisionBody),CollisionBody.prototype.init=function(){var a=this;if(this.data.colliderType=this.options.colliderType||"rectangle",void 0===rootfn.colliderTesters[this.data.colliderType])throw new Error('Invalid colliderType "'+this.data.colliderType+'"');a.data.bounds={};var b=a.entity.anchor;switch(a.data.bounds.x=(this.options.x||0)-(b.x||0),a.data.bounds.y=(this.options.y||0)-(b.y||0),a.data.colliderType){case"rectangle":a.data.bounds.width=void 0===this.options.width?a.entity.width:this.options.width,a.data.bounds.height=void 0===this.options.height?a.entity.height:this.options.height;break;case"cricle":a.data.bounds.radius=void 0===this.options.radius?a.entity.width:this.options.radius;break;default:throw new Error("Unrecognized colliderType")}},CollisionBody}(),c.components.add("CollisionBody",function(a){return new c.CollisionBody(a)})}($sr=window.$sr=window.$sr||{});
//# sourceMappingURL=../CollisionBody.js.map